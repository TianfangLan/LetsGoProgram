package jshell.files;

import java.util.List;

/**
 * FileSystem of the JShell. The FileSystem is responsible
 * for creating and managing files/directories. All the
 * files and directories are in virtual environment, whhich
 * means that when JShell is closed, all the files and
 * directories will be cleared and removed.<br>
 * FileSystem is designed to use Singleton Mode, which means
 * only one instance of FileSystem should exists. This design
 * is actually very reasonable since there should be only
 * one system running and modifying files, multiple instances
 * may causes files interruptions.<br>
 * Way to access FileSystem: <code>FileSystem.getSystem()...</code>
 * @author danielxu
 *
 */
public class FileSystem {

	private Directory dir;
	private static final FileSystem instance = new FileSystem();
	
	/*
	 * FileSystem is using singleton mode, therefore,
	 * set constructor as private
	 */
	private FileSystem() {
		dir = new Directory();
	}

	/**
	 * Clean the whole file system, remove all files and directories
	 * and start by a new root directory with nothing in it. Use with
	 * caution!
	 */
	public void clean() {
		dir = new Directory();
	}
	
	/**
	 * Get all the files and directories under current working directory,
	 * store in a string array.
	 * @return A string array that stores all the files and directories under
	 * current working directory
	 */
	public String[] list() {
		List<Node> list = dir.list();
		String[] names = new String[list.size()];
		for(int i=0;i<list.size();i++) {
			names[i] = list.get(i).getName();
		}
		return names;
	}
	
	/**
	 * Get the current directory in string format
	 * @return Current working directory in string format
	 */
	public String getCur() {
		return dir.getCurPath().toString();
	}
	
	/**
	 * Change the current working directory to given directory
	 * by <b>relative path</b>
	 * 
	 * @param path The string representation of the path
	 * 
	 * @require Please make sure that the path is a valid
	 * path, for example, 'usr/daniel' is a valid relative
	 * path, which means change to directory 'daniel' in 'usr'
	 * folder, where 'usr' is one of the folders in current working
	 * directory.
	 */
	public void changeRelative(String path) {
		dir.change(new RelativePath(dir.getCurPath(), path));
	}
	
	/**
	 * Change the current working directory to given directory
	 * by <b>absolute path</b>
	 * 
	 * @param path The string representation of the path
	 * 
	 * @reuqire Please make sure that the path is a valid
	 * path, for example, '/usr/CSCB07/Assignment' is
	 * a valid absolute path, which means change to directory
	 * 'Assignment' under '/usr/CSCB07/Assignment'.
	 */
	public void changeAbsolute(String path) {
		dir.change(new Path(path));
	}
	
	/**
	 * Create a new <b>file</b> by given <b>relative path</b>
	 * 
	 * @param path The string representation of the path
	 * 
	 * @require Please make sure that the path is a valid
	 * path, for example, 'usr/README.txt' is a valid relative
	 * path, which means create a file named 'README.txt' inside 'usr'
	 * folder, where 'usr' is one of the folders in current working
	 * directory.
	 */
	public void newRelativeFile(String path) {
		dir.appendf(new RelativePath(dir.getCurPath(), path));
	}
	
	/**
	 * Create a new <b>file</b> by given <b>absolute path</b>
	 * 
	 * @param path The string representation of the path
	 * 
	 * @require Please make sure that the path is a valid
	 * path, for example, 'CSCB07/Assignment' is
	 * a valid relative path, which means create directory
	 * 'Assignment' under folder 'CSCB07', where 'CSCB07'
	 * is one of the folders in current working directory
	 */
	public void newAbsoluteFile(String path) {
		dir.appendf(new Path(path));
	}
	
	/**
	 * Create a new <b>directory</b> by given <b>relative path</b>
	 * 
	 * @param path The string representation of the path
	 * 
	 * @require Please make sure that the path is a valid
	 * path, for example, 'usr/daniel' is a valid relative
	 * path, which means create a folder named 'daniel' inside 'usr'
	 * folder, where 'usr' is one of the folders in current working
	 * directory.
	 */
	public void newRelativeDir(String path) {
		dir.append(new RelativePath(dir.getCurPath(), path));
	}
	
	/**
	 * Create a new <b>directory</b> by given <b>absolute path</b>
	 * 
	 * @param path The string representation of the path
	 * 
	 * @require Please make sure that the path is a valid
	 * path, for example, '/usr/CSCB07/Assignment' is
	 * a valid absolute path, which means create directory
	 * 'Assignment' under '/usr/CSCB07/Assignment'.
	 */
	public void newAbsoluteDir(String path) {
		dir.append(new Path(path));
	}
	
	
	/**
	 * Get the instance of the {@link FileSystem}, there is only one
	 * instance being shared accross the whole application.
	 * @return
	 */
	public static final FileSystem getSystem() {
		return instance;
	}
	
}
